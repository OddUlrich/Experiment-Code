第2章、因特网客户端编程
网络通信协议：
文件传输：FTP、SCP等
阅读Usenet新闻组：NNTP
发送电子邮件：SMTP
从服务器上下载电子邮件：POP3、IMAP

    唯一区别在于现在使用 TCP/IP这样底层的协议创建了新的、有专门用途的协议,以此来实现这些高层服务。

FTP有两种模式：主动和被动。在主动模式下使用数据端口（有时是20端口）。

简单邮件传输协议(Simple Mail Transfer Protocol,SMTP)
LMTP(Local Mail Transfer Protocol,本地邮件传输协议)
第一个用于下载邮件的协议称为邮局协议(Post Office Protocal,POP)
因特网消息访问协议(Internet Message Access Protocol,IMAP)


第3章、多线程编程
使用单线程处理多个外部输入源的任务如果不使用多线程,要实现这种编程任务就需要为串行程序使用一个或多个计时器,并实现一个多路复用方案。
一个串行程序需要从每个 I/O 终端通道来检查用户的输入;程序在读取 I/O 终端通道时不能阻塞,因为用户输入的到达时间是不确定的,并且阻塞会妨碍其他 I/O 通道的处理。串行程序必须使用非阻塞 I/O 或拥有计时器的阻塞 I/O(以保证阻塞只是暂时的)。
由于串行程序只有唯一的执行线程,因此它必须兼顾需要执行的多个任务,确保其中的某个任务不会占用过多时间,并对用户的响应时间进行合理的分配。这种任务类型的串行程序的使用,往往造成非常复杂的控制流,难以理解和维护。

对 Python 虚拟机的访问是由全局解释器锁(GIL)控制的。这个锁就是用来保证同时只
能有一个线程运行的。

thread 模块提供了基本的线程和锁定支持;
threading 模块提供了更高级别、功能更全面的线程管理。
使用 Queue 模块,用户可以创建一个队列数据结构,用于在多线程之间进行共享。

引出锁作为同步机制的原因：可能会过早或过晚退出主线程，子线程将直接终止。

守护线程工作方式是:守护线程一般是一个等待客户端请求服务的服务器。如果没有客户端请求,守护线程就是空闲的。如果把一个线程设置为守护线程,就表示这个线程是不重要的,进程退出时不需要等待这个线程执行完成。



















